{"version":3,"sources":["components/statistics/Statistics.jsx","components/feedbackOptions/FeedbackOptions.jsx","components/section/Section.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onButtonIncrement","type","name","onClick","Section","title","children","App","state","e","setState","prevState","target","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAmBeA,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OAEI,8BACI,+BACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,aCMDC,EAbS,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,kBACpB,OAAS,gCACL,wBAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,EAA3C,kBAGA,wBAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,EAA9C,qBAGA,wBAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,EAA1C,qBCFKI,EAVC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtB,OACI,oCACI,6BAAKD,IACJC,MC0EEC,E,4MAvEbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPI,kBAAoB,SAAAS,GAClB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOV,KAAOS,EAAUF,EAAEG,OAAOV,MAAQ,O,EAwBhDW,mBAAqB,WACnB,OAAO,EAAKL,MAAMd,KAAO,EAAKc,MAAMb,QAAU,EAAKa,MAAMZ,K,EAE3DkB,gCAAkC,WAChC,OAAOC,KAAKC,MACS,IAAlB,EAAKR,MAAMd,MAAe,EAAKc,MAAMb,QAAU,EAAKa,MAAMZ,IAAM,EAAKY,MAAMd,Q,4CAIhF,WACE,OACE,gCACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACEL,kBAAmBiB,KAAKjB,sBAO5B,cAAC,EAAD,CAASK,MAAM,aAAf,SACGY,KAAKT,MAAMd,MAAQuB,KAAKT,MAAMb,UAA8B,IAAnBsB,KAAKT,MAAMZ,IACnD,cAAC,EAAD,CACEF,KAAMuB,KAAKT,MAAMd,KACjBC,QAASsB,KAAKT,MAAMb,QACpBC,IAAKqB,KAAKT,MAAMZ,IAChBC,MAAOoB,KAAKJ,qBACZf,mBAAoBmB,KAAKH,oCAG3B,6B,GAhEMI,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a81ce25.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        \r\n        <div>\r\n            <ul>\r\n                <li>Good:{good}</li>\r\n                <li>Neutral:{neutral}</li>\r\n                <li>Bad:{bad}</li>\r\n                <li>Total:{total}</li>\r\n                <li>Positive feedback:{positivePercentage}%</li>\r\n            </ul>\r\n            </div>\r\n        )\r\n       \r\n       \r\n          }\r\n    \r\nexport default Statistics","import React from \"react\"\r\n\r\n\r\n    \r\nconst FeedbackOptions = ({onButtonIncrement}) => {\r\n      return ( <div>\r\n          <button type=\"button\" name=\"good\" onClick={onButtonIncrement}>\r\n            Good\r\n          </button>\r\n          <button type=\"button\" name=\"neutral\" onClick={onButtonIncrement}>\r\n            Neutral\r\n          </button>\r\n          <button type=\"button\" name=\"bad\" onClick={onButtonIncrement}>\r\n            Bad\r\n          </button>\r\n        </div> )\r\n}\r\nexport default FeedbackOptions\r\n    \r\n","const Section = ({ title, children}) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n    \r\n}\r\n\r\nexport default Section","import './App.css';\nimport { Component } from 'react';\nimport Statistics from './components/statistics/Statistics';\nimport FeedbackOptions from './components/feedbackOptions/FeedbackOptions';\nimport Section from './components/section/Section';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onButtonIncrement = e => {\n    this.setState(prevState => ({\n      [e.target.name]: prevState[e.target.name] + 1,\n    }));\n  };\n  // GoodIncrement = () => {\n  //   this.setState(prevState => {\n  //     return {\n  //       good: prevState.good + 1,\n  //     };\n  //   });\n  // };\n  // NeutralIncrement = () => {\n  //   this.setState(prevState => {\n  //     return {\n  //       neutral: prevState.neutral + 1,\n  //     };\n  //   });\n  // };\n  // BadIncrement = () => {\n  //   this.setState(prevState => {\n  //     return {\n  //       bad: prevState.bad + 1,\n  //     };\n  //   });\n  // };\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    return Math.floor(\n      (this.state.good * 100) / (this.state.neutral + this.state.bad + this.state.good),\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            onButtonIncrement={this.onButtonIncrement}\n            // goodIncrement={this.GoodIncrement}\n            // neutralIncrement={this.NeutralIncrement}\n            // badIncrement={this.BadIncrement}\n          ></FeedbackOptions>\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.state.good || this.state.neutral || this.state.bad === true ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            'No feedback given'\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}